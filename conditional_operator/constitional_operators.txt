Разветвляющийся алгоритм – алгоритм, содержащий хотя бы одно условие, в результате проверки которого может осуществляться разделение на несколько параллельных ветвей алгоритма.

Условие – логическое выражение, принимающее одно из двух значений: «истина» или «ложь».

Условный оператор if – оператор, реализующий разветвляющийся алгоритм.

Операции сравнения
if(a==b) cout << "a is equal b";
if(a!=b) cout << "a is not equal b";
if(a<b) cout << "a is less than b";
if(a>b) cout << "a is more than b";
if(a<=b) cout << "a is less or equal b";
if(a>=b) cout << "a is more or equal b";

Условие - число
Если в качестве условия выступает числовое значение, то оно воспринимается как ложь, если равно нулю, и истиной в противном случае.

if(x) cout << "x is not equal 0";
if(!x) cout << "x=0";
if(x=5) cout << "warning! now x=5";
if(x-y) cout << "x is not equal y";

Логические операции
Как и во многих языках в языке С++ допустимы логические связки:

! – «не» (операция отрицания, not)
&& - «и» (логическое умножение, конъюнкция, and)
|| - «или» (логическое сложение, дизъюнкция, or)
Некоторые компиляторы языка C++ поддерживают использование ключевых слов "not", "and" и "or" вместо " !", "&&" и "||" соответственно. 
Несмотря на это, в целях лучшей совместимости не рекомендуется их использовать.

Анализ принадлежности точки x отрезку [a,b]

//условие принадлежности точки x отрезку [a,b]
if(x>=a && x<=b) cout << "x in [a,b]";
//условие, что точка x не принадлежит отрезку [a,b]
if(x<a || x>b) cout << "x not in [a,b]";
Используя закон де Моргана мы вправе записать данные условия иначе:

if(!(x>=a && x<=b)) cout << "x not in [a,b]";
if(!(x<a || x>b)) cout << "x in [a,b]";

Тернарный оператор "?"
В C++ можно использовать тернарный оператор "?", который часто может заменить условный оператор. Формат его записи:

условие?оператор1:оператор2

Результатом данного выражения будет "оператор1", если "условие" истинно, и "оператор2" в противном случае.

Примеры использования оператора "?":